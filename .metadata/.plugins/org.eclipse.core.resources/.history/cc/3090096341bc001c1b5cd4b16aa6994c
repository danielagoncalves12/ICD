package tp1.battleship;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

public class GameModel {

	private int[][] boardPlayer1 = new int[10][10]; // Tabuleiro do jogador 1
	private GameView view = new GameView();			// Visualização na consola
	private HashMap<String, Integer> columnValue = new HashMap<>();
	
	public GameModel() {
		
		// Preencher o tabuleiro inicial com zeros [Por explorar (Sem navio)]
		Arrays.stream(boardPlayer1).forEach(a -> Arrays.fill(a, 0));
		
		columnValue.put("A", 0);
		columnValue.put("B", 1);
		columnValue.put("C", 2);
		columnValue.put("D", 3);
		columnValue.put("E", 4);
		columnValue.put("F", 5);
		columnValue.put("G", 6);
		columnValue.put("H", 7);
		columnValue.put("I", 8);
		columnValue.put("J", 9);
		
		// Pergunta ao jogador, pelas posições dos navios
		chooseShipPosition();
	}
	
	public void chooseShipPosition() {
		
		String[] positionRequests = {
				"Posicione um porta-aviões (5 quadrados)",
				"Posicione dois navios-tanque (4 quadrados)",
				"Posicione três contratorpedeiros (3 quadrados)",
				"Posicione quatro submarinos (2 quadrados)"
		};
		
		int[] shipSizes  = {5, 4, 4, 3, 3, 3, 2, 2, 2, 2};
		int[] shipNumber = {1, 2, 3, 4};
		
		Scanner scan = new Scanner(System.in);

		for (int i = 0; i < shipSizes.length - 1; i++) {
		
			System.out.println(positionRequests[i]);
			
			String position = "";  // Posição introduzida pelo utilizador
			boolean check = false; // Verificação da posição
			int number = 0;		   // Número de navios por posicionar
			
			while(number != shipNumber[i]) {
			
				do {
					System.out.println("Insira o número e letra (Ex. 1A): ");
					position = scan.nextLine();
					check = checkValidPosition(position, shipSizes[i]);
	
					// Caso a posição seja válida, é introduzido o navio
					if (check) {
						int steps  = 0;
						int line   = Character.getNumericValue(position.charAt(0));
						int column = columnValue.get(position.charAt(1) + "");
						
						while(steps != shipSizes[i]) {		
							boardPlayer1[line++][column] = 2;
							steps++;
						}
						number++;
						System.out.println(number);
						System.out.println(shipNumber[i]);
					}
				} while(!check);
				this.view.printBoard(boardPlayer1);
			}		
		}
	}
	
	public boolean checkValidPosition(String position, int shipSize) {
		
		char line   = position.charAt(0);
		char column = position.charAt(1);
		
		// Verificação do sintaxe da posição
		if (Character.isDigit(line)) {
			
			int line_number = Character.getNumericValue(line);
			if (Character.isLetter(column)) {

				int column_number = columnValue.get(column + "");
				int steps = 0;						
				while(steps != shipSize) {
					
					// Verificação - Dentro do tabuleiro
					if (line_number < 0 || line_number >= 10) {
						System.out.println("Erro: Navio fora do tabuleiro.");		
						return false;
					}

					// Verificação - Colisão com outro navio
					if (boardPlayer1[line_number][column_number] != 0) {
						System.out.println("Erro: Colisão com outro navio.");		
						return false;
					}
					line_number++;
					steps++;
				}			
				return true;
			}
		}
		
		System.out.println("Erro: Sintaxe inválida");		
		return false;
	}
	
	
	public static void main(String[] args) {
		
		new GameModel();
	}
}
